{"version":3,"sources":["actions.js","api/api.js","constants.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/CounterButton.js","components/Header.js","components/MainPage.js","containers/App.js","registerServiceWorker.js","reducers.js","index.js"],"names":["requestRobots","dispatch","link","type","fetch","then","response","json","data","payload","catch","error","Card","name","email","id","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","aria-label","placeholder","onChange","Scroll","props","style","overflowY","height","children","ErrorBoundary","state","hasError","info","this","setState","Component","CounterButton","updateCount","count","nextProps","nextState","background","onClick","Header","MainPage","filterRobots","filter","robot","toLowerCase","includes","searchField","onRequestRobots","onSearchChange","isPending","App","connect","searchRobots","event","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e8f70bc9.chunk.js","sourcesContent":["import { apiCall } from './api/api';\nimport {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from './constants.js';\n\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const requestRobots = () => dispatch => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  apiCall('https://jsonplaceholder.typicode.com/users')\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\n};\n","export const apiCall = (link) => \n  fetch(link).then(response => response.json());\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","import React from 'react';\nimport './Card.css';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className=\"tc white w-20 dib br3 pa3 ma2 grow bw2 shadow-5 bg-purple-gradient phablet\">\n      <img\n        src={`https://robohash.org/${id}/set_set3?size=200x200`}\n        alt=\"Robot\"\n      />\n      <div>\n        <h2>{name}</h2>\n        <p className=\"light-gray\">{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div className=\"flex flex-wrap justify-center\">\n      {robots.map((user, i) => {\n        return (\n          <Card\n            key={i}\n            id={robots[i].id}\n            name={robots[i].name}\n            email={robots[i].email}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        aria-label=\"Search Robots\"\n        className=\"pa3 ba b--transparent mb3 bg-lightest-blue br2\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = props => {\n  return (\n    <div style={{ overflowY: 'scroll', height: '900px' }}>{props.children}</div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oooops. That's not good</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n  constructor() {\n    super();\n    this.state = {\n      count: 1,\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextState !== this.state.count) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  updateCount = () => {\n    this.setState(state => {\n      return { count: state.count + 1 };\n    });\n  };\n\n  render() {\n    return (\n      <button\n        className=\"br2 white b--transparent pb1 pt1 pa5 mb3 grow\"\n        style={{\n          background:\n            'linear-gradient(to bottom, #5679f9, #5679f9, #5679f9, #5679f9, #5679f9)',\n        }}\n        onClick={this.updateCount}\n      >\n        Count: {this.state.count}\n      </button>\n    );\n  }\n}\n\nexport default CounterButton;\n","import React, { Component } from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n\n  render() {\n    return (\n      <div>\n        <h1 className=\"f2\">RoboFriends</h1>\n        <CounterButton />\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\n\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport Header from '../components/Header';\nimport './MainPage.css';\n\nclass MainPage extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  filterRobots = () => {\n    return this.props.robots.filter(robot => {\n      return robot.name\n        .toLowerCase()\n        .includes(this.props.searchField.toLowerCase());\n    });\n  };\n\n  render() {\n    const { onSearchChange, isPending } = this.props;\n\n    return (\n      <div className=\"tc\">\n        <Header />\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          {isPending ? (\n            <h1>Loading</h1>\n          ) : (\n            <ErrorBoundary>\n              <CardList robots={this.filterRobots(this.props.robots)} />\n            </ErrorBoundary>\n          )}\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default MainPage;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from '../actions';\n\nimport MainPage from '../components/MainPage';\n\nconst mapStateToProps = state => ({\n  searchField: state.searchRobots.searchField,\n  robots: state.requestRobots.robots,\n  isPending: state.requestRobots.isPending,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSearchChange: event => dispatch(setSearchField(event.target.value)),\n  onRequestRobots: () => dispatch(requestRobots()),\n});\n\nclass App extends Component {\n  render() {\n    return <MainPage {...this.props} />;\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from './constants.js';\n\nconst initialStateSearch = {\n  searchField: '',\n};\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: '',\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        robots: action.payload,\n        isPending: false,\n      });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {\n        error: action.payload,\n        isPending: false,\n      });\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\n// import { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\n// const logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\nregisterServiceWorker();\n"],"sourceRoot":""}